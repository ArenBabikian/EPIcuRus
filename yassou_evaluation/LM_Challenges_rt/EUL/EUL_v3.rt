vardef
	theta,Real,input;
	Vi_1,Real,input;
	Vi_2,Real,input;
	Vi_3,Real,input;
	DCM321_1_1,Real,input;
	DCM321_2_1,Real,input;
	DCM321_3_1,Real,input;
	DCM321_1_2,Real,input;
	DCM321_2_2,Real,input;
	DCM321_3_2,Real,input;
	DCM321_1_3,Real,input;
	DCM321_2_3,Real,input;
	DCM321_3_3,Real,input;
	DCM_det,Real,output;
	Vb_1,Real,output;
	Vb_2,Real,output;
	Vb_3,Real,output;
	r1xr1Transpose,Bool,output;
	r2xr2Transpose,Bool,output;
	r3xr3Transpose,Bool,output;
	r1xr2Transpose,Bool,output;
	r1xr3Transpose,Bool,output;
	r2xr3Transpose,Bool,output;
	c1xc1Transpose,Bool,output;
	c2xc2Transpose,Bool,output;
	c3xc3Transpose,Bool,output;
	c1xc2Transpose,Bool,output;
	c1xc3Transpose,Bool,output;
	c2xc3Transpose,Bool,output;
	r2xr1Transpose,Bool,output;
	r3xr1Transpose,Bool,output;
	r3xr2Transpose,Bool,output;
endvardef
reqdef 
	true, Vb_1 == DCM321_1_1 * Vi_1 + DCM321_1_2 * Vi_2 + DCM321_1_3 * Vi_3;
	true, Vb_2 == DCM321_2_1 * Vi_1 + DCM321_2_2 * Vi_2 + DCM321_2_3 * Vi_3;
	true, Vb_3 == DCM321_3_1 * Vi_1 + DCM321_3_2 * Vi_2 + DCM321_3_3 * Vi_3;
	true, Vb_1*Vb_1 + Vb_2*Vb_2 + Vb_3*Vb_3 == Vi_1*Vi_1 + Vi_2*Vi_2 + Vi_3*Vi_3;
	theta >= 0, theta != 3.1415926536/2 & DCM_det != 0.0;
	theta < 0, -theta != 3.1415926536/2 & DCM_det != 0.0;
	true, DCM_det == (((DCM321_1_1 * ((DCM321_2_2 * DCM321_3_3) - (DCM321_2_3 * DCM321_3_2))) + (DCM321_1_2 * ((DCM321_2_3 * DCM321_3_1) - (DCM321_2_1 * DCM321_3_3)))) + (DCM321_1_3 * ((DCM321_2_1 * DCM321_3_2) - (DCM321_3_1 * DCM321_2_2))));
	true, c1xc1Transpose & c2xc2Transpose & c3xc3Transpose;
	true, c1xc2Transpose & c1xc3Transpose & c2xc3Transpose;
	true, r1xr1Transpose & r1xr2Transpose & r1xr3Transpose & r2xr1Transpose & r2xr2Transpose & r2xr3Transpose & r3xr1Transpose & r3xr2Transpose & r3xr3Transpose;
	DCM321_1_1 * DCM321_1_1 + DCM321_1_2 * DCM321_1_2 + DCM321_1_3 * DCM321_1_3 == 1.0, r1xr1Transpose;
	DCM321_1_1 * DCM321_1_1 + DCM321_1_2 * DCM321_1_2 + DCM321_1_3 * DCM321_1_3 != 1.0, !r1xr1Transpose;
	DCM321_2_1 * DCM321_2_1 + DCM321_2_2 * DCM321_2_2 + DCM321_2_3 * DCM321_2_3 == 1.0, r2xr2Transpose;
	DCM321_2_1 * DCM321_2_1 + DCM321_2_2 * DCM321_2_2 + DCM321_2_3 * DCM321_2_3 != 1.0, !r2xr2Transpose;
	DCM321_3_1 * DCM321_3_1 + DCM321_3_2 * DCM321_3_2 + DCM321_3_3 * DCM321_3_3 == 1.0, r3xr3Transpose;
	DCM321_3_1 * DCM321_3_1 + DCM321_3_2 * DCM321_3_2 + DCM321_3_3 * DCM321_3_3 != 1.0, !r3xr3Transpose;
	DCM321_1_1 * DCM321_2_1 + DCM321_1_2 * DCM321_2_2 + DCM321_1_3 * DCM321_2_3 == 0.0, r1xr2Transpose;
	DCM321_1_1 * DCM321_2_1 + DCM321_1_2 * DCM321_2_2 + DCM321_1_3 * DCM321_2_3 != 0.0, !r1xr2Transpose;
	DCM321_1_1 * DCM321_3_1 + DCM321_1_2 * DCM321_3_2 + DCM321_1_3 * DCM321_3_3 == 0.0, r1xr3Transpose;
	DCM321_1_1 * DCM321_3_1 + DCM321_1_2 * DCM321_3_2 + DCM321_1_3 * DCM321_3_3 != 0.0, !r1xr3Transpose;
	DCM321_2_1 * DCM321_3_1 + DCM321_2_2 * DCM321_3_2 + DCM321_2_3 * DCM321_3_3 == 0.0, r2xr3Transpose;
	DCM321_2_1 * DCM321_3_1 + DCM321_2_2 * DCM321_3_2 + DCM321_2_3 * DCM321_3_3 != 0.0, !r2xr3Transpose;
	DCM321_1_1 * DCM321_1_1 + DCM321_2_1 * DCM321_2_1 + DCM321_3_1 * DCM321_3_1 == 1.0, c1xc1Transpose;
	DCM321_1_1 * DCM321_1_1 + DCM321_2_1 * DCM321_2_1 + DCM321_3_1 * DCM321_3_1 != 1.0, !c1xc1Transpose;
	DCM321_1_2 * DCM321_1_2 + DCM321_2_2 * DCM321_2_2 + DCM321_3_2 * DCM321_3_2 == 1.0, c2xc2Transpose;
	DCM321_1_2 * DCM321_1_2 + DCM321_2_2 * DCM321_2_2 + DCM321_3_2 * DCM321_3_2 != 1.0, !c2xc2Transpose;
	DCM321_1_3 * DCM321_1_3 + DCM321_2_3 * DCM321_2_3 + DCM321_3_3 * DCM321_3_3 == 1.0, c3xc3Transpose;
	DCM321_1_3 * DCM321_1_3 + DCM321_2_3 * DCM321_2_3 + DCM321_3_3 * DCM321_3_3 != 1.0, !c3xc3Transpose;
	DCM321_1_1 * DCM321_1_2 + DCM321_2_1 * DCM321_2_2 + DCM321_3_1 * DCM321_3_2 == 0.0, c1xc2Transpose;
	DCM321_1_1 * DCM321_1_2 + DCM321_2_1 * DCM321_2_2 + DCM321_3_1 * DCM321_3_2 != 0.0, !c1xc2Transpose;
	DCM321_1_1 * DCM321_1_3 + DCM321_2_1 * DCM321_2_3 + DCM321_3_1 * DCM321_3_3 == 0.0, c1xc3Transpose;
	DCM321_1_1 * DCM321_1_3 + DCM321_2_1 * DCM321_2_3 + DCM321_3_1 * DCM321_3_3 != 0.0, !c1xc3Transpose;
	DCM321_1_2 * DCM321_1_3 + DCM321_2_2 * DCM321_2_3 + DCM321_3_2 * DCM321_3_3 == 0.0, c2xc3Transpose;
	DCM321_1_2 * DCM321_1_3 + DCM321_2_2 * DCM321_2_3 + DCM321_3_2 * DCM321_3_3 != 0.0, !c2xc3Transpose;
	DCM321_2_1 * DCM321_1_1 + DCM321_2_2 * DCM321_1_2 + DCM321_2_3 * DCM321_1_3 == 0.0, r2xr1Transpose;
	DCM321_2_1 * DCM321_1_1 + DCM321_2_2 * DCM321_1_2 + DCM321_2_3 * DCM321_1_3 != 0.0, !r2xr1Transpose;
	DCM321_3_1 * DCM321_1_1 + DCM321_3_2 * DCM321_1_2 + DCM321_3_3 * DCM321_1_3 == 0.0, r3xr1Transpose;
	DCM321_3_1 * DCM321_1_1 + DCM321_3_2 * DCM321_1_2 + DCM321_3_3 * DCM321_1_3 != 0.0, !r3xr1Transpose;
	DCM321_3_1 * DCM321_2_1 + DCM321_3_2 * DCM321_2_2 + DCM321_3_3 * DCM321_2_3 == 0.0, r3xr2Transpose;
	DCM321_3_1 * DCM321_2_1 + DCM321_3_2 * DCM321_2_2 + DCM321_3_3 * DCM321_2_3 != 0.0, !r3xr2Transpose;
	true, DCM_det == 1.0;
endreqdef
